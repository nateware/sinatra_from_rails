##
# Generated by "rake sinatra:from_rails:classic OUTPUT_FILE=/Users/nwiger/Workspace/sinatra_from_rails/spec/output/main_xml.rb FORMAT=xml RENDER=builder"
# Keep up to date: http://github.com/nateware/sinatra_from_rails
#

# Categories
get '/categories.xml' do
  @categories = Category.all
  @categories.to_xml
end

get '/categories/:id.xml' do
  @category = Category.find(params[:id])
  @category.to_xml
end

post '/categories/:id/details.xml' do
  @category = Category.view(params[:policy_type], params[:platform],
  session[:region_code] || Setting[:default_region], 
  session[:language_code] || Setting[:default_language], 
  params[:username])
  builder :'categories/view'
end       

get '/categories/new.xml' do
  @category = Category.new
  @category.to_xml
end

post '/categories.xml' do
  @category = Category.new(params[:category])
  if @category.save
    @category.to_xml
  else
    @category.errors.to_xml
  end
end

put '/categories/:id.xml' do
  @category = Category.find(params[:id])
  raise InvalidCategory        if [params[:a], params[:b]].include? '123'
  if @category.update_attributes(params[:category])
    halt 200
  else
    @category.errors.to_xml
  end
end

delete '/categories/:id.xml' do
  @category = Category.find(params[:id])
  @category.destroy
  halt 200
end

# Complexes
get '/complexes.xml' do
  @complexes = Complex.all
  @complexes.to_xml
end

get '/complexes/:id.xml' do
  if params[:username]
    @complex = Complex.find_by_username(params[:username])
  else
    @complex = Complex.find(params[:id])
  end
  @complex.to_xml
end

get '/complexes/new.xml' do
  @complex = Complex.new
  @complex.to_xml
end

post '/complexes.xml' do
  @complex = Complex.new(params[:complex])
  if @complex.save
    @complex.to_xml
  else
    @complex.errors.to_xml
  end
end

put '/complexes/:id.xml' do
  @complex = Complex.find(params[:id])
  if @complex.update_attributes(params[:complex])
    halt 200
  else
    @complex.errors.to_xml
  end
end

get '/complexes/search.xml' do
  @complex =
  if ! params[:search].nil?
    Complex.search(params)
    elsif ! params[:search_tags].nil?
    Complex.tags_search(params)
  end
  raise "Insufficient input to search with - please provide a value for either the 'search' or 'search_tags' request parameters." if params[:search].nil? && params[:search_tags].nil?
  builder :'complexes/search'
end

delete '/complexes/:id.xml' do
  @complex = Complex.find(params[:id])
  @complex.destroy
  halt 200
end

# Posts
get '/posts.xml' do
  @posts = Post.all
  @posts.to_xml
end

get '/posts/:id.xml' do
  @post = Post.find(params[:id])
  @post.to_xml
end

get '/posts/new.xml' do
  @post = Post.new
  @post.to_xml
end

post '/posts.xml' do
  @post = Post.new(params[:post])
  if @post.save
    @post.to_xml
  else
    @post.errors.to_xml
  end
end

put '/posts/:id.xml' do
  @post = Post.find(params[:id])
  if @post.update_attributes(params[:post])
    halt 200
  else
    @post.errors.to_xml
  end
end

delete '/posts/:id.xml' do
  @post = Post.find(params[:id])
  @post.destroy
  halt 200
end

# Topic categories
get '/topic_categories.xml' do
  @topic_categories = TopicCategory.all
  @topic_categories.to_xml
end

get '/topic_categories/:id.xml' do
  @topic_category = TopicCategory.find(params[:id])
  @topic_category.to_xml
end

get '/topic_categories/new.xml' do
  @topic_category = TopicCategory.new
  @topic_category.to_xml
end

post '/topic_categories.xml' do
  @topic_category = TopicCategory.new(params[:topic_category])
  if @topic_category.save
    @topic_category.to_xml
  else
    @topic_category.errors.to_xml
  end
end

put '/topic_categories/:id.xml' do
  @topic_category = TopicCategory.find(params[:id])
  if @topic_category.update_attributes(params[:topic_category])
    halt 200
  else
    @topic_category.errors.to_xml
  end
end

delete '/topic_categories/:id.xml' do
  @topic_category = TopicCategory.find(params[:id])
  @topic_category.destroy
  halt 200
end

# Users
get '/users.xml' do
  @users = User.all
  @users.to_xml
end

get '/users/:id.xml' do
  @user = User.find(params[:id])
  @user.to_xml
end

get '/users/new.xml' do
  @user = User.new
  @user.to_xml
end

post '/users.xml' do
  @user = User.new(params[:user])
  if @user.save
    @user.ticket = Ticket.generate
    @user.to_xml
  else
    @user.errors.to_xml
  end
end

put '/users/:id.xml' do
  @user = User.find(params[:id])
  if @user.update_attributes(params[:user])
    halt 200
  else
    @user.errors.to_xml
  end
end

delete '/users/:id.xml' do
  @user = User.find(params[:id])
  @user.destroy
  halt 200
end
